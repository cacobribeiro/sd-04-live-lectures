O assunto do dia de hoje é uma estrutura de dados chamada Hash Map e sua implementação mais conhecida é o dict.
Na biblioteca padrão da linguagem temos também variações desta estrutura adicionando algumas características que podem ser interessantes, como ordenação e imutabilidade.


:correntes: ChainMap
Agrupa múltiplos dicionários em um só. É possível realizar buscas sobre todos os dicionários agrupados. Operações que modifiquem o mapeamento somente afetam o primeiro.

from collections import ChainMap

group = ChainMap({"nome": "Cássio", "idade": "30"}, {"cargo": "Especialista"})
print(group["nome"])
print(group["cargo"])

:1234: OrderedDict
São como dicionário, porém mantem a ordenação das chaves e valores adicionadas à coleção.

from collections import OrderedDict

ordered = collections.OrderedDict()
d["nome"] = "Cássio"
d["idade"] = 30
d["cargo"] = "especialista"
print(d.keys())  # odict_keys(['nome', 'idade', 'cargo']) a ordem de inserção das chaves é mantida

Nota: à partir da versão 3.6 do Python, a implementação padrão de dict também mantém ordenação e isto começa a valer para todas as outras implementações que não o CPython à partir da versão 3.7.

:coringa: defaultdict
Se comporta como um dicionário porém retorna valores padrões quando a chave está faltando.

from collections import defaultdict

default = defaultdict(list)
# como a chave team não existe ela é criada e uma lista vazia é atribuída,
# assim conseguimos adicionar chaves diretamente
default["team"].append("Cássio") 
default["team"].append("Gleison")
default["team"].append("Marco")

print(default)

Quem curtiu reage com :abcd_maiúsculas: !