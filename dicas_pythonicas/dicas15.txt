Para finalizar o bloco de orientação a objetos, a dica de hoje é sobre os "dunder methods" que também são conhecidos como "special methods". São métodos especiais que geralmente são utilizados pelos mecanismos internos da linguagem. Recebem este nome dunder pois tem como prefixo e sufixo dois underscores, por exemplo __add__ que é lido como dunder add.

Estes métodos estão associados com comportamentos padrões da linguagem como operadores, inicialização de objetos, obter sua representação em string, ou coletar itens de uma sequência.

Alguns exemplos são:

__eq__ -> método invocado quando utilizamos o operador de comparação por igualdade ==
Esta comparação é de valores e não se os objetos são o mesmos.

__str__ -> invocado quando fazemos str() no objeto (a função print utiliza a função str).

__add__(self, other)  -> invocado quando utilizamos o operador aritmético + .

__iter__ -> retorna o iterador de um objeto contêiner. É utilizado quando invocamos a função iter()  ou quando iteramos por um objeto (for).

Lembrando que nos exemplos acima não deveríamos invocar as funções diretamente, mas sim utilizar instance == instanceb, str(instance), instancea + instanceb, iter(instance) ou for, respectivamente.

https://rszalski.github.io/magicmethods/

Este design elegante é conhecido como modelo de dados Python e permite que os desenvolvedores explorem ricos recursos de linguagem, como sequências, iteração, sobrecarga de operador, acesso a atributos, etc.

Fato curioso: Como em Python tudo é objeto, dado um objeto numérico a = 2  e outro objeto numérico b = 3 ,  quando fazemos a soma a + b  podemos dizer que estamos invocando o método __add__ do objeto a passando um segundo objeto b  e retornando um terceiro objeto numérico que representa a soma dois dois números, ou seja a.__add__(b) .

Quem curtiu reage com :irmao-jorel-feliz: ! 

Link: https://docs.python.org/3/reference/datamodel.html